Program:
C Program to implement Shift Cipher
#include <stdio.h>
#include <string.h>
#include<conio.h>
#include <ctype.h>
void main()
{
char plain[10], cipher[10];
int key,i,length;
int result;
printf("\n Enter the plain text:");
scanf("%s", plain);
printf("\n Enter the key value:");
scanf("%d", &key);
printf("\n \n \t PLAIN TEXt: %s",plain);
printf("\n \n \t ENCRYPTED TEXT: ");
for(i = 0, length = strlen(plain); i < length; i++)
{
cipher[i]=plain[i] + key;
if (isupper(plain[i]) && (cipher[i] > 'Z'))
cipher[i] = cipher[i] - 26;
if (islower(plain[i]) && (cipher[i] > 'z'))
cipher[i] = cipher[i] - 26;
printf("%c", cipher[i]);
}
printf("\n \n \t AFTER DECRYPTION : ");
for(i=0;i<length;i++)
{
plain[i]=cipher[i]-key;
if(isupper(cipher[i])&&(plain[i]<'A'))
plain[i]=plain[i]+26;
if(islower(cipher[i])&&(plain[i]<'a'))
plain[i]=plain[i]+26;
printf("%c",plain[i]);
}
getch();
}




Write a C Program to implement Mono-Alphabetic Substitution Cipher.
#include<stdio.h>
char monocipher_encr(char);
char mono[27][2] = { { 'a', 'f' }, { 'b', 'a' }, { 'c', 'g' }, { 'd', 'u' }, {
'e', 'n' }, { 'f', 'i' }, { 'g', 'j' }, { 'h', 'k' }, { 'i', 'l' }, {
'j', 'm' }, { 'k', 'o' }, { 'l', 'p' }, { 'm', 'q' }, { 'n', 'r' }, {
'o', 's' }, { 'p', 't' }, { 'q', 'v' }, { 'r', 'w' }, { 's', 'x' }, {
't', 'y' }, { 'u', 'z' }, { 'v', 'b' }, { 'w', 'c' }, { 'x', 'd' }, {
'y', 'e' }, { 'z', 'h' } };
char str[20];
int main() {
char str[20], str2[20];
int i;
printf("\n Enter String..");
gets(str);
for (i = 0; str[i]; i++) {
str2[i] = monocipher_encr(str[i]);
}
str2[i] = '\0';
printf("\n Before Decryption..%s", str);
printf("\n After Decryption..%s\n", str2);
}
char monocipher_encr(char a) {
int i;
for (i = 0; i < 27; i++) {
if (a == mono[i][0])
break;
}
return mono[i][1];
}




C Program to implement one-time pad cipher.
#include <stdio.h>
#include <string.h>
void encrypt(char *plaintext, char *key, char *ciphertext) {
    int i;
    int len = strlen(plaintext);

    for (i = 0; i < len; i++) {
        ciphertext[i] = (plaintext[i] - 'A' + key[i] - 'A') % 26 + 'A';
    }
    ciphertext[len] = '\0';
}

void decrypt(char *ciphertext, char *key, char *plaintext) {
    int i;
    int len = strlen(ciphertext);

    for (i = 0; i < len; i++) {
        plaintext[i] = (ciphertext[i] - key[i] + 26) % 26 + 'A';
    }
    plaintext[len] = '\0';
}

int main() {
    char plaintext[100], key[100], ciphertext[100];
    
    printf("Enter the plaintext: ");
    scanf("%s", plaintext);

    printf("Enter the key: ");
    scanf("%s", key);

    encrypt(plaintext, key, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);

    decrypt(ciphertext, key, plaintext);
    printf("Decrypted text: %s\n", plaintext);

    return 0;
}



 2.2) Write a C Program to implement vernam cipher
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
void encrypt(char *plaintext, char *key,char *ciphertext)
{
int i;
for(i=0; i<strlen(plaintext);i++)
{
ciphertext[i] = plaintext[i] ^ key[i];
}
}
void decrypt(char *ciphertext , char *key , char *plaintext)
{
int i;
for(i=0; i<strlen(ciphertext);i++)
{
plaintext[i] = ciphertext[i] ^ key[i];
}
}
int main(int argc, char *argv[])
{
char plaintext[100];
char key[100];
char ciphertext[100];
printf("Enter Plaintext ");
scanf("%s",plaintext);
printf("Enter Key ");
scanf("%s",key);
encrypt(plaintext,key,ciphertext);
printf("Ciphertext : %s\n",ciphertext);
decrypt(ciphertext,key,plaintext);
printf("Plaintext: %s\n",plaintext);
return 0; 
}



3.1) Write a C Program to implement DES Algorithm
#include<stdio.h>
int main()
{
int i, cnt=0, p8[8]={6,7,8,9,1,2,3,4};
int p10[10]={6,7,8,9,10,1,2,3,4,5};
char input[11], k1[10], k2[10], temp[11];
char LS1[5], LS2[5];
printf("Enter 10 bits input:");
scanf("%s",input);
input[10]='\0';
for(i=0; i<10; i++)
{
cnt = p10[i];
temp[i] = input[cnt-1];
}
temp[i]='\0';
printf("\nYour p10 key is :");
for(i=0; i<10; i++)
{
printf("%d,",p10[i]);
}
printf("\nBits after p10 :");
puts(temp);
for(i=0; i<5; i++)
{
if(i==4)
temp[i]=temp[0];
else
temp[i]=temp[i+1];
}
for(i=5; i<10; i++)
{
if(i==9)
temp[i]=temp[5];
else
temp[i]=temp[i+1];
}
printf("Output after LS-1 :");
puts(temp);
printf("\nYour p8 key is :");
for(i=0; i<8; i++)
{
printf("%d,",p8[i]);
}
for(i=0; i<8; i++)
{
cnt = p8[i];
k1[i] = temp[cnt-1];
}
printf("\nYour key k1 is :");
puts(k1);
}





4.1) Write a C Program to implement RSA algorithm
#include<stdio.h>
#include<math.h>
int gcd(int a, int h)
{
int temp;
while(1)
{
temp = a%h;
if(temp==0)
return h;
a = h;
h = temp;
}
}
int main()
{
double p = 3;
double q = 7;
double n=p*q;
double count;
double totient = (p-1)*(q-1);
double e=2;
while(e<totient)
{
count = gcd(e,totient);
if(count==1)
break;
else
e++;
}
double d;
double k = 2;
d = (1 + (k*totient))/e;
double msg = 12;
double c = pow(msg,e);
double m = pow(c,d);
c=fmod(c,n);
m=fmod(m,n);
printf("Message data = %lf",msg);
printf("\np = %lf",p);
printf("\nq = %lf",q);
printf("\nn = pq = %lf",n);
printf("\ntotient = %lf",totient);
printf("\ne = %lf",e);
printf("\nd = %lf",d);
printf("\nEncrypted data = %lf",c);
printf("\nOriginal Message Sent = %lf",m);
return 0;
}




4.2) C Program to implement Diffie-Helman Key Exchange Algorithm.
#include <math.h>
#include <stdio.h>
long long int power(long long int a, long long int b,long long int P)
{
 if (b == 1)
 return a;
 else
 return (((long long int)pow(a, b)) % P);
}
int main()
{
 long long int P, G, x, a, y, b, ka, kb;
 P = 23;
 printf("The value of P : %lld\n", P);
 G = 9;
 printf("The value of G : %lld\n\n", G);
 a = 4;
 printf("The private key a for Alice : %lld\n", a);
 x = power(G, a, P);
 b = 3;
 printf("The private key b for Bob : %lld\n\n", b);
 y = power(G, b, P);
 ka = power(y, a, P);
 kb = power(x, b, P);
 printf("Secret key for the Alice is : %lld\n", ka);
 printf("Secret Key for the Bob is : %lld\n", kb);
 return 0;
}



